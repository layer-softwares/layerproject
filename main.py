"""
This document contains the regular expressions for our programming language.
Â® 2023 Layer Programming Language design,

Layer language overview,

    Layer is a new programming language designed to be fast and the most powerful programming language.
    What makes layer different from other programming languages is that it is completly new, different
    and different execution architecture.

Layer working and execution architecture,

    Layer does not use the traditional interpreter or compiler architecture, it uses a new architecture
    called the 'layer engine'.
    The layer code can be written in a text editor and saved with the '.layer' or '.ly' extension.
    The layer engine is a program that reads the layer code and executes it.
    But How does the layer engine work?
        The layer engine is a program which reads the layer code and performs the following steps,
            1. Lexical analysis
            2. Syntax analysis
            3. Semantic analysis
            4. Code generation (new)
            5. Code execution (new)
            but it is done in a different way than other programming languages.
        When layer code passes the first 3 steps and reaches the 4th step,
        the layer engine generates something we call it as 'super prompt' based on layer code.
        The super prompt is a new type of LLM prompt which can only be understood by the layer LLM.
            The layer LLM what we call it 'Assembly fusion' is a new type of LLM which is trained only on,
                Assembly language, X86, X86_64, ARM architectures. It is trained to understand the super prompts
                generated by the layer engine. And based on the super prompt, the layer LLM generates the ASM code.
            Then, the ASM code is what the layer engine executes. Making it the fastest programming language.

    In short,
        Layer code -> Layer engine -> Super prompt -> Layer LLM -> ASM code -> Layer engine -> Code execution

"""
import sys
from engine.lexer.lexer import Lexer
from engine.tokeniser.tokeniser import Tokenizer
from engine.parser.parser import Parser
from engine.enginecode import Interpreter


# Test the tokenizer and lexer
if __name__ == '__main__':
    sourceCode = open("/Users/ajay/projectlayer/ly/zero.ly").read()
    tokenizer = Tokenizer()
    tok_stream = tokenizer.tokenize(sourceCode)
    lexer = Lexer(tok_stream)
    lexed_tokens = lexer.lex()
    print(lexed_tokens)

    # Test the parser
    parser = Parser(lexed_tokens)
    ast = parser.parse()
    print(ast)

    # Test the interpreter
    interpreter = Interpreter(ast)
    interpreter.interpret()
    print(interpreter.variables)